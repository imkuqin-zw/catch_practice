// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: inventory.proto

package zw_com_shop_srv_inventory

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Inventory service

type InventoryService interface {
	UpdateInventory(ctx context.Context, in *ReqUpdateInventory, opts ...client.CallOption) (*InventoryCount, error)
	GetInventory(ctx context.Context, in *GoodsId, opts ...client.CallOption) (*InventoryCount, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Inventory_PingPongService, error)
}

type inventoryService struct {
	c    client.Client
	name string
}

func NewInventoryService(name string, c client.Client) InventoryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "zw.com.shop.srv.inventory"
	}
	return &inventoryService{
		c:    c,
		name: name,
	}
}

func (c *inventoryService) UpdateInventory(ctx context.Context, in *ReqUpdateInventory, opts ...client.CallOption) (*InventoryCount, error) {
	req := c.c.NewRequest(c.name, "Inventory.UpdateInventory", in)
	out := new(InventoryCount)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) GetInventory(ctx context.Context, in *GoodsId, opts ...client.CallOption) (*InventoryCount, error) {
	req := c.c.NewRequest(c.name, "Inventory.GetInventory", in)
	out := new(InventoryCount)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) PingPong(ctx context.Context, opts ...client.CallOption) (Inventory_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Inventory.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &inventoryServicePingPong{stream}, nil
}

type Inventory_PingPongService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type inventoryServicePingPong struct {
	stream client.Stream
}

func (x *inventoryServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *inventoryServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *inventoryServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *inventoryServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *inventoryServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Inventory service

type InventoryHandler interface {
	UpdateInventory(context.Context, *ReqUpdateInventory, *InventoryCount) error
	GetInventory(context.Context, *GoodsId, *InventoryCount) error
	PingPong(context.Context, Inventory_PingPongStream) error
}

func RegisterInventoryHandler(s server.Server, hdlr InventoryHandler, opts ...server.HandlerOption) error {
	type inventory interface {
		UpdateInventory(ctx context.Context, in *ReqUpdateInventory, out *InventoryCount) error
		GetInventory(ctx context.Context, in *GoodsId, out *InventoryCount) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Inventory struct {
		inventory
	}
	h := &inventoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Inventory{h}, opts...))
}

type inventoryHandler struct {
	InventoryHandler
}

func (h *inventoryHandler) UpdateInventory(ctx context.Context, in *ReqUpdateInventory, out *InventoryCount) error {
	return h.InventoryHandler.UpdateInventory(ctx, in, out)
}

func (h *inventoryHandler) GetInventory(ctx context.Context, in *GoodsId, out *InventoryCount) error {
	return h.InventoryHandler.GetInventory(ctx, in, out)
}

func (h *inventoryHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.InventoryHandler.PingPong(ctx, &inventoryPingPongStream{stream})
}

type Inventory_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type inventoryPingPongStream struct {
	stream server.Stream
}

func (x *inventoryPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *inventoryPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *inventoryPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *inventoryPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *inventoryPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
